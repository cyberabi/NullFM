               PAG       
********************************************************************
* NullAPI - System space routines to call NullFM drivers
*
* $Id$
*
* Edt/Rev  YYYY/MM/DD  Modified by
* Comment
* ------------------------------------------------------------------
*   0      2019/10/23  Chris Burke
* Coded to resemble 68K DAVID NullFM, with some adjustments.
* "use" this in other source to include the API.
*

         ifp1
         use   defsfile
         use   nulldefs
         endc

******************************
*
* [DOC] General usage:
*
*        ifp1
*        use   defsfile
*        use   nulldefs
*        use   spidefs
*        use   flashdefs
*        endc
*        use   nullAPI
*
* nullAPI is the API for NullFM and shared resource device drivers.
* It includes two routines: NFDirect and NFInitPB.
*
* NullFM manages shared resources, such as a SPI bus or a flash memory.
* It doesn't manage individual SPI peripherals or individual regions of
* a flash memory; a higher-level device driver must do that. NullFM and
* the associated shared resource device drivers are called only from
* system space, e.g. by higher-level device drivers.
*
* Each type of shared resource has a corresponding device class.
* Currently there are two device classes: NDC.SPI and NDC.FLASH.
*
* Although you can make certain OS9 _$____ calls to NullFM, they are
* passed through to the shared resource driver with undefined results.
*
* Normally you'll do this instead:
*
*   "Open" a NullFM shared resource device from a higher-level driver:
*   - OS9 I$Attach to the device; save Device Table Entry pointer returned in U
*
*   "Call" directly, repeatedly, asynchronously into the the shared resource device driver via NullFM:
*   - Load your Device Table Entry pointer into X
*   - Load a config handle, returned from a previous call, into A
*   - Build an NPB parameter block @Y (lbsr NFInitPB + other callback initialization)
*   - Load a shared resource driver function code into B
*   - Call into the driver (lbsr NFDirect)
*   - Most calls are asynchronous and return immediately WITH OR WITHOUT BEING FINISHED
*   - There's a flag in the parameter block to indicate whether it is finished or not.
*   - Results are returned in the NPB parameter block, via the callback you provided
*   - The callback receives a pointer argument in U, a parameter block pointer in Y,
*     and carry set / error in B if error
*   - The callback must not deallocate / re-use the parameter block as it is / could be
*     invoked before the call to NFDirect has returned.
*   - The callback doesn't return an error code, and does not have to preserve B / CC
*
*   "Close" a NullFM device:
*     OS9 I$Detach using the saved Device Table Entry pointer in U
*


******************************
*
* [DOC] Functions supported by the NDC.SPI (SPI bus) device class:
*
* The SPI device class supports a SPI bus in master or slave mode (depending on hardware)
*
* When operating as a master:
* - Provide a select number in SPI.RDTC
* - Call SPI.TDT at will to transfer data
*   The SPI bus driver will allow time between selecting the slave and starting
*   the data transfer, based on the clock attributes specified in SPI.RDTC. This
*   means that the higher-level driver must be aware of any timing requirements
*   of the slave, in order to pass them on to NullFM and the shared resource driver.
*
* When operating as a slave:
* - Provide enable and disable callbacks in SPI.RDTC
* - Call SPI.TDT when selected (from your enable callback)
* - The master will need to allow enough time for interrupt service, buffer setup,
*   and your call back to SPI.TDT between selecting you and starting the transfer.
*   How this happens is master-specific and not controllable by a slave device.
*
* Function code SPI.DD: Deregister a Device
* - NPB.HNDL = handle to deregister
* - Errors: E$DevBsy, E$Param
*
* Function code SPI.ESM: Enter Slave Mode
* - NPB.HNDL = handle (slave mode)
* - NPB.U = ready callback
* - NPB.PRM0 = ready callback param
* - Errors: E$DevBsy, E$Param
*
* Function code SPI.XSM: Exit Slave Mode
* - NPB.HNDL = handle (slave mode)
* - Errors: E$DevBsy, E$Param, E$NotRdy
*
* Function code SPI.RDTC: Register Data Transfer Configuration
* - NPB.D = clock rate : clock attributes
* - NPB.X = disable callback (slave mode only)
* - NPB.Y = transfer attributes : select
* - NPB.U = enable callback (slave mode only)
* - NPB.PRM0 = enable callback param (slave mode only)
* - NPB.PRM1 = disable callback param (slave mode only)
* - Returns NPB.HNDL = handle
* - Errors: E$NoRam
*
* Function code SPI.TDT: Transfer Data to and from the Target
* - NPB.HNDL = handle 
* - NPB.B = (optional) constant data byte if transmit buffer is null 
* - NPB.X = transmit buffer (may be null)
* - NPB.Y = receive buffer (may be null)
* - NPB.U = completion callback
* - NPB.PRM0 = completion callback param 
* - NPB.PRM1 = buffer size
* - Errors: E$DevBsy, E$Param, E$NoRam
*

******************************
*
* [DOC] Functions supported by the NDC.FLASH (FLASH memory) device class:
*
* Function code FLA.DSIZE: Retrieve Number of Sectors and Current Sector Size
* - NPB.HNDL = Path number from F$Open
* - Returns NPB.PRM0 = # sectors
* - Returns NPB.PRM1 = Size of sector
* - Returns NPB.U = Size of smallest writeable region
* - Errors: E$BPNum
** Function code FLA.GSPOS: Retrieve the Current Path Position* - NPB.HNDL = Path number from F$Open
* - Returns NPB.X = MS word of position
* - Returns NPB.U = LS word of position
* - Errors: E$BPNum
** Function code FLA.SSPOS: Establish the Current Path Position
* - NPB.HNDL = Path number from F$Open
* - NPB.X = MS word of position
* - NPB.U = LS word of position
* - Errors: E$BPNum, E$Seek
*

******************************
*
* Call a NullFM driver via the file manager
* 
* Entry: B = driver function code
*        X = address of Device Table Entry
*        Y = address of parameter block
*
* Exit:  X = address of Device Table Entry
*        Y = address of parameter block
*        Parameter block might be modified
*        Buffers pointed to by parameter block might be modified
*        Callbacks pointed to by parameter block might have been invoked
*
* Error: CC Carry set  
*        B = errcode
*        Error code also in NPB.ERR
*        
NFDirect equ   *
         IFGT  Level-1
         pshs  u,y,x
         ldu   <V$FMGREX,x  File manager dispatch table
         ELSE
         pshs  u,y,x,b
         ldu   <V$FMGR,x    File manager
         ldd   <M$EXEC,uÂ    Dispatch table
         leau  d,u
         puls  b
         ENDC
         jsr   FMDRCT,u     Direct call entry offset for file manager
         puls  x,y,u,pc


******************************
*
* Initialize a parameter block
* The caller has to fill in some of NPB.RGV and NPB.PARMs
* The file manager will fill in NPB.FMST
*
* Entry: X = address of Device Table Entry
*        Y = address of parameter block
*        D = parameter block R$D value
*        U = parameter block R$U value
*
* Exit:  X = address of Device Table Entry
*        Y = address of parameter block
*        D = parameter block R$D value
*        U = parameter block R$U value
*        Linked List, Busy, and DTE fields of NPB initialized
*        R$X and R$U fields of NPB initialized
*
* Error: 
*
NFInitPB std   <NPB.RGV+R$D,y
         stu   <NPB.RGV+R$U,y
         stx   <NPB.DEV,y   DTE pointer
         clr   <NPB.ERR,y   No error yet
         clr   NPB.BUSY,y   Mark as busy
         inc   NPB.BUSY,y   Mark as busy
         rts
         