********************************************************************
* W25QXX - Flash Memory RBF Device Driver
*
* $Id$
*
* Edt/Rev  YYYY/MM/DD  Modified by
* Comment
* ------------------------------------------------------------------
*   0      2019/11/10  Chris Burke
* Coded as a demo for NullFM; the driver uses NullFM and SPI via nullAPI
* to access a W25Qxxx SPI flash memory that contains a single disk image.
* Demo for Level 2 only.
*
* Portions based DC3_drvr_src example (C) Microware Systems Corporation.
*

         nam   W25QXX
         ttl   W25QXX Flash Memory RBF Device Driver

         ifp1  
         use   defsfile
         use   rbf.d
         use   nulldefs
         use   spidefs
         use   flashdefs
         endc  

DriveCnt set   1            For this demo support only one drive
SPIXMem  set   256+6        Sector buffer + room for the largest SPI command

******************************
*
* W25Q128 SPI Commands
*
* This device operates in SPI Mode 0 or 3, burst mode, MSB-first
* https://www.winbond.com/resource-files/w25q128jv%20revf%2003272018%20plus.pdf
*
* The device is organized into 65,536 programmable pages of 256-bytes each.
* Up to 256 bytes can be programmed at a time. Pages can be erased in groups 
* of 16 (4KB  sector  erase).
*
* The erased state is $FF, and once programmed a byte can't be reprogrammed
* (other than by clearing additional bits) unless first erased.
*
* To create a read / write device from this, we treat each 4K "sector" of flash
* as a physical sector of the drive, and use only the first 256 byte page.
* This lets us hanle up to 4096 sectors (1MB of floppy capacity). It's very
* wasteful but gives us a straightforward demo of the SPI bus controlling flash.
*

F.PGPGM  equ   $02          (A A A D...) Page program / write (a sector is 4K; a page is 256 bytes)
F.WRDS   equ   $04          Write disable
F.RSTS1  equ   $05          (d) Read status register 1 (7-0)
F.WREN   equ   $06          Write enable
F.READF  equ   $0B          (A A A 0 d...) Fast read
F.RSTS3  equ   $15          (d) Read status register 3 (23-16)
F.ERSCT  equ   $20          (A A A) Sector erase (a sector is 4K: a page is 256 bytes)
F.RSTS2  equ   $35          (d) Read status register 2 (15-8)
F.ERCHP  equ   $60          Erase entire chip
F.ENRST  equ   $66          Enable soft reset
F.EXRST  equ   $99          Execute soft reset
F.ERCH2  equ   $C7          Erase entire chip (secondary)

S1.WEL   equ   %00000010    Indicates write enabled
S1.BSY   equ   %00000001    Indicates a write in progress

S3.DRV   equ   %01100000    Hardware driver strength of output (defaults to 3)


******************************
*
* Static Storage
*
*
         org   Drvbeg
         rmb   Drvmem*DriveCnt

CURTBL   rmb   2            Ptr to current drive tbl
CURDRV   rmb   1            Drive select bit pattern
V.TMP    rmb   1            Temporary save byte
V.BUF    rmb   2            Local buffer addr
V.FREZ   rmb   1            Freeze dd. info (for one read0)

V.SPI    rmb   2            Device table entry for SPIBUS
V.HNDL   rmb   1            SPI device handle (only need one in this demo)
V.PBLK   rmb   NPB.SIZ      SPI parameter block (only need one in this demo)
size     equ   .            Total static requirement


******************************
*
* Module header
*

tylg     set   Drivr+Objct   
atrv     set   ReEnt+rev
rev      set   $00
edition  set   0

         mod   eom,name,tylg,atrv,start,size
         
name     fcs   "W25QXX"
         fcb   edition
         
busname  fcs   "SPIBUS"         
         
******************************
*
* Branch Table
*
start    lbra  Init
         lbra  Read
         lbra  Write
         lbra  GetStat
         lbra  SetStat
         lbra  Term


         pag
******************************
*
* Put Status call
*

SetStat  ldx   PD.RGS,y     Point to parameters
         ldb   R$B,x        Get stat call
         cmpb  #SS.Reset    Restore call?
          beq  RESTOR       ..yes; do it (dummy operation)
         cmpb  #SS.WTrk     Write track call?
          lbeq WRTTRK       ..yes; do it.
         cmpb  #SS.FRZ      Freeze dd. info?
          beq  SETFRZ       Yes; ....flag it.
          
* Get Status call
* We don't support any GetStt calls
GetStat  comb               ...NO; Error
         ldb   #E$UnkSvc    Error code
         rts

* Freeze dd. info (SS.Frz)
SETFRZ   ldb   #$FF
         stb   V.FREZ,u     Set flag
         
RESTOR   equ   *
         clrb
         rts


         pag
******************************
*
* Initialize the I/O port
*
* The flash memory is on the SPI bus. To access it we link to
* the spi bus (SPIBUS device) via an I$Attach call, and then register
* a configuration that tells the SPI bus our slave select, the
* kind of clocking we need, etc.
*
* Entry: U = Global Storage
*        Y = Device Descriptor
*
* Exit:  A Modified
*        X Modified
*        Y Unchanged
*        U Unchanged
*

Init     lda   #$FF
         ldb   #DriveCnt
         stb   V.NDRV,u     Inz number of drives
         leax  DRVBEG,u     Point to first drive table
         
INILUP   sta   DD.TOT+2,x   Inz total number of sectors to non-zero (dummy)
         sta   V.TRAK,x     Inz current track to high track count (dummy)
         leax  DRVMEM,x     Point to next drive table
         decb
          bne  INILUP
          
         ldd   #SPIXMem     We need a sector buffer + room for the largest SPI command
         pshs  u
         OS9   F$SRqMem
         tfr   u,x
         puls  U
          bcs  RETRN1       Error out if no mem available
         stx   V.BUF,u      Save base address for future use

         pshs  u
         leax  busname,pc   We need to attach to the SPI bus
         lda   #UPDAT.
         OS9   I$Attach
         tfr   u,x
         puls  U
          bcs  RETRN1       Error out if no SPI bus available
         stx   V.SPI,u      Save device table entry for future use
         
         pshs  y
         
         leay  V.PBLK,u     We need to declare a suitable SPI configuration; parameter block
         ldd   #(CKR.0US*256+CKA.MD0+CKA.BRST) No delays, mode 0, burst mode
         lbsr  NFInitPB     Call API function to set up parameter block
         lda   #UPDAT.+ATR.MSB
         ldb   V.PORT+1,u   Get our slave select from the dummy address
         andb  #3
         orb   #CKA.BRST    Burst mode
         std   NPB.Y,y
         
         ldb   #SPI.RDTC    Register the configuration
         stb   NPB.FUNC,y
         lbsr  NFDirect     Call API function to register configuration
         lda   NPB.HNDL,y
         puls  y
          bcs  RETRN1
         sta   V.HNDL,u     Save "handle" for our SPI configuration
         
         clrb
         
RETRN1   rts


         pag
******************************
*
* Write Sector command
*
* Physical sectors are 4096 bytes; we use only the first 256.
* Since flash isn't rewritable without erasing, we erase the
* whole physical sector before each write.
*
* Entry: B = Msb Of Logical Sector Number
*        X = Lsb's Of Logical Sector Number
*        Y = Path Descriptor
*        U = Global Storage
*
*        PD.BUF,Y = Sector buffer
*
* Exit:  256 Bytes Of Data Written From Buffer
*
* Error:
*   Carry Set
*   B = Error Code
*

Write    pshs  y,x,a
         bsr   SELECT       Select drive
          bcs  WRERR9

* Flash location = LSN * 16 * 256
         tstb               Must be zero
          bne  LSNErr       or LSN is out of range

* Write-enable the flash
         ldb   #F.WREN      Write-enable the device
         bsr   CMD1B        (execute one-byte command)
          bcs  WRERR9
         
* Erase this "sector"
         clrb
         bsr   LSN2Addr     Convert LSN in B:X to flash address in A:X
         pshs  x,a
         ldb   #F.ERSCT     Erase Sector command
         bsr   CMD4B        (execute four-byte command)
         puls  a,x
          bcs  WRERR9
         
* Write the first page of the sector
         ldy   PD.BUF,y     Caller's buffer
         bsr   CMDWRT       Write one page from buffer in Y to flash address in A:X
         
WRERR9   puls  a,x,y,pc

LSNERR   comb
         ldb   #E$Sect      Error: bad sector number
         puls  a,x,y,pc
         
         
******************************
*
* Write Full Track (SS.WTrk)
*
* We treat this like a hard disk: if the track is zero, we erase
* the whole device; otherwise we ignore the call.
*
* The caller's track buffer is ignored.
*
* Entry: X = PD.RGS
*        Y = Path Descriptor
*        U = Global Storage
*
*        R$X = Address of track buffer.*        R$U = Track number (LS 8 bits)
*        R$Y = Side number (LS bit)
*

WRTTRK   bsr   SELECT       Select drive
          bcs  WRTTRK9

         lda   R$U+1,x      Track number
          bne  WRTTRK9
         lda   R$Y+1,x      Side number
         bita  #1
          bne  WRTTRK9
          
* Track 0, Side 0
* Write-enable the flash
         ldb   #F.WREN      Write-enable the device
         bsr   CMD1B        (execute one-byte command)
          bcs  WRTTRK9
         
* Erase whole flash
         bsr   SCT2ADR      Get starting address of 1st flash sector in this track
         ldb   #F.ERCHP     Erase chip command
         bsr   CMD1B        (execute one-byte command)
         
WRTTRK9  rts
         
         
         pag
******************************
*
* Read Sector command
*
* Physical sectors are 4096 bytes; we use only the first 256.
*
* Entry: B = Msb Of Logical Sector Number
*        X = Lsb's Of Logical Sector Number
*        Y = Path Descriptor
*        U = Global Storage
*
*        PD.BUF,Y = Sector buffer
*
* Exit:  256 Bytes Of Data Returned In Buffer
*
* Error:
*   Carry Set
*   B = Error Code
*

Read     pshs  y,x,a
         bsr   SELECT       Select drive
          bcs  RDERR9
          
* Flash location = LSN * 16 * 256
         tstb               Must be zero
          bne  LSNErr       or LSN is out of range

         cmpx  #0           Special case for LSN0 read
          bne  ReadFrz
         tst   V.Frez,u     Not special if DD info is frozen
          beq  ReadLSN0
          
* Read the first page of the sector
ReadFrz  bsr   LSN2Addr     Convert LSN in B:X to flash address in A:X
         ldy   PD.BUF,y     Caller's buffer
         bsr   CMDRDD       Read one page into buffer in Y from flash address in A:X
         
RDERR9   puls  a,x,y,pc
 
          
         pag
******************************
*
* Select Drive
*
* Entry: U = Pointer To Global Storage
*        Y = Pointer To Path Descriptor
*
* Exit:  Curtbl,u=Current Drive Tbl
*        Curdrv,u=Drive Number
*        V.SIDE,u=0
*
SELECT   lda   PD.DRV,y     Get drive number
         cmpa  V.NDRV,u     Drive num ok?
          bhs  ERUNIT
          
         pshs  b,x
         sta   CURDRV,u
         leax  DRVBEG,u     Table beginning
         ldb   #DRVMEM
         mul                OFFSET For this drive
         leax  d,x
         stx   CURTBL,u     Current table ptr
         clr   V.SIDE,u     Default to side zero (used by PHYSIC)
         puls  b,x,pc


ERUNIT   comb
         ldb   #E$Unit      Error: illegal unit (drive)
         rts
         
         
 pag
******************************
*
* Convert Logical Sector Number to physical flash address
* Each physical sector is 4096 bytes, so we need to multiply
* the input LSN by 16 * 256
*
* Entry:  B = Msb Of Logical Sector Number (0)
*         X = Lsb's Of Logical Sector Number
*         U = Global storage
*
* Exit:   A = Msb of physical flash address
*         X = Lsb's  of physical flash address
*         U = Unchanged
*         Y = Unchanged
*
* Error:
*   Carry Set
*   B = Error Code
*
LSN2Addr tstb               CHECK Sector bounds
          bne  PHYERR       msb must be zero
          
         tfr   x,d          Logical sector (os-9)
         cmpd  #0           Logical sector zero?
          beq  PHYSC7       ..yes; skip conversion (A:X correct)
         
         bita  #$F0         LSN must be $000..$FFF
          bne  PHYERR
          
         ldx   CURTBL,u
         cmpd  DD.TOT+1,x   Too high sector number?
          bhs  PHYERR       ..yes; sorry
          
         clr   ,-s          x 256
         aslb
         rola
         aslb
         rola
         aslb
         rola
         aslb
         rola               x 16
         pshs  d
         puls  a,x

         clrb               Success
         rts

* The LSN is out of range
PHYERR   comb
         ldb   #E$Sect      Error: bad sector number
         rts

 
         pag
******************************
*
* Read Logical Sector Zero
*
* Entry: B = Msb Of Logical Sector Number (0)
*        X = Lsb's Of Logical Sector Number (0)
*        Y = Path Descriptor
*        U = Global Storage
*
*        PD.BUF,Y = Sector buffer
*        Caller's y,x,a on stack
*
* Exit:  256 Bytes Of Data Returned In Buffer
*
* Error:
*   Carry Set
*   B = Error Code
*

ReadLSN0 bsr   LSN2Addr     Convert LSN in B:X to flash address in A:X
         ldy   PD.BUF,y     Caller's buffer
         bsr   CMDRDD       Read one page into buffer in Y from flash address in A:X
         
         ldx   PD.BUF,y
         ldy   CURTBL,u
         ldb   #DD.SIZ-1
READ01   lda   b,x
         sta   b,y
         decb
          bpl  READ01

         clrb
         puls  a,x,y,pc

 
         pag
******************************
*
* Terminate use of the disk
*
* Entry: U = Global Storage
*
* Exit:
*   Deregister our SPI config
*   Detach from the SPI driver
*   Return Local memory to the system
*
* Error:
*   Carry Set
*   B = Error Code
*
*

Term     equ   *

* Deregister our SPI config
         pshs  y
         leay  V.PBLK,u     Return our SPI configuration
         lda   V.HNDL,u     using the handle returned previously
         sta   NPB.HNDL,y
         ldb   #SPI.DD
         stb   NPB.FUNC,y
         lbsr  NFDirect     Call API function to register configuration
         puls  y
         
* Detach from the SPI driver
         pshs  u
         ldu   V.SPI,u      Device Table Entry
         OS9   I$Detach
         puls  U            Ignore any error

* Return local memory
         ldu   V.BUF,u      Point to memory for return
         ldd   #SPIXMem
         OS9   F$SRtMem     Return local buffer to free mem
         
         clrb
         rts


         emod

eom      equ   *

         end
