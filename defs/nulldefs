
NULLDEFS       SET       1

********************************************************************
* NULLDEFS - Null File Manager Definitions
*
* $Id$
*
* NullFM stands for 'Null Filemanager' and is a package of subroutines
* that define the logical structure of a generic device that controls
* a shared resource such as a SPI bus or a Flash memory bank.
*
* The data structures in this file give NULLF its 'personality' and are
* used by NullFM itself, as well as by other drivers that share the
* associated device resources.
*
* Edt/Rev  YYYY/MM/DD  Modified by
* Comment
* ------------------------------------------------------------------
*          2019/10/23  Chris Burke
* Coded using SCF.d as a strarting point.

               NAM       NULLDEFS
               TTL       Null File Manager Definitions


               PAG       
*******************************
* Things that should be in os9defs
*
DT.NULL        SET       5                   Null Manager device type

               ORG       FMCLOSE
               RMB       3
FMDRCT         RMB       3                   Entry point in NullFM to make direct call to device driver

               ORG       D$TERM
               RMB       3
D$DRCT         RMB       3                   Entry point in device driver for direct calls

               ORG       E$IllArg
E$Param        RMB       1                   Alias for OSK error code used in DAVID NullFM docs


               PAG       
*******************************
* NullFM device classes (IT.NDVC)
*
NDC.SPI        SET       0                   Serial Peripheral Interface (SPI) device class
NDC.FLASH      SET       1                   Flash device class


               PAG       
*******************************
* NullFM Device Descriptor Offsets
*
* These definitions are for NullFM device descriptors.
*
* These descriptors define the shared resource, not
* individual peripherals or regions of the shared resource.
*
               ORG       M$DTyp
IT.NDVT        RMB       1                   Device type (DT.NULL)
IT.NDVC        RMB       1                   Device class (NDC.SPI, NDC.FLASH)
IT.ACMD        RMB       1                   Access mode (READ., WRITE., SHARE.)
IT.MPAK        RMB       1                   MultiPak slot number
               RMB       4                   (reserved for future use)
IT.NCLASS      EQU       .


               PAG       
********************
* NULLF Device Static Storage
*
* NULLF devices must reserve this space for NULLF
*
               ORG       V.USER
V.NCLASS       RMB       1                   Device class (NF.SPI, NF.FLASH)
V.MAXSLV       RMB       1                   Max # slaves (allocates this + 1 config blocks; extra is us as slave) (SPI)
V.NMEM         RMB       2                   Pointer to memory allocated for device's config blocks (SPI)
V.NMSZ         RMB       2                   Size of memory allocated for device's config blocks (SPI)
V.NFREE        RMB       2                   Pointer to free list of device config blocks (SPI)
V.NRSV         RMB       8                   Reserve bytes for future expansion
V.NULLF        EQU       .                   Total Null manager static overhead


               PAG       
*********************************************
* Null Driver Parameter Block format
*
* Direct calls to a NullFM device vector through NullFM and
* use a Parameter Block instead of a Path Descriptor.
*
* Parameter Blocks can be stored in a linked list of pending
* operations to resolve bus contention, and include callback
* pointers, parameters, etc.
*
* Generally, NPB.RGV+R$B will contain a function code and the
* rest of the buffer will contain parameters
*

V$NMAGIC       SET       $FFFF

               ORG       0
NPB.DEV        RMB       2                   Device Table Entry Address
NPB.RGV        RMB       (R$Size-2)          Register / Parameter package (no PC) e.g. NPB.RGV+R$X for X
NPB.PARM0      RMB       2                   Additional 16-bit parameter, typically a pointer
NPB.PARM1      RMB       2                   Additional 16-bit parameter, typically a pointer
NPB.FMST       RMB       2                   FM / Driver use: Pointer to registered configuration
NPB.PBP        RMB       2                   Pointer to next parameter block in wait list, or $0000
NPB.SIZ        EQU       .

NPB.ERR        EQU       (NBP.RGV+R$CC)      CC is not stored; instead, result of the call; 0 = OK, non-zero = error code
NBP.FUNC       EQU       (NBP.RGV+R$DP)      DP is not stored; instead, store the function code (e.g. SPI.TDT) here
NBP.HNDL       EQU       (NBP.RGV+R$A)       SPI specific: A is the "handle" for a registered confifuration

NBP.D          EQU       (NBP.RGV+R$D)       "D" register parameter block contents
NBP.B          EQU       (NBP.RGV+R$B)       "B" register parameter block contents
NBP.U          EQU       (NBP.RGV+R$U)       "U" register parameter block contents


               PAG        
*********************************************
* Direct call function codes
*
               ORG       $00
* Common NullFM function codes
               RMB       16
NFC.CFC        EQU       .                   Start of class-specific function codes


